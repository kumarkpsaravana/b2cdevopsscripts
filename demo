def lambda_handler(event, context):
    # Access the last session's `AuthParameters`
    session = event['request']['session']
    auth_params = session[-1]['challengeMetadata'] if session else {}

    # Example: check custom parameters
    device_type = auth_params.get('deviceType')
    login_method = auth_params.get('loginMethod')

    # Define the challenge based on custom parameters
    if device_type == 'trusted' and login_method == 'passwordless':
        # Bypass MFA and issue tokens directly
        event['response']['challengeName'] = 'CUSTOM_CHALLENGE'
        event['response']['failAuthentication'] = False
        event['response']['issueTokens'] = True
    else:
        # Require an MFA challenge if not trusted or if login method is password-based
        event['response']['challengeName'] = 'SMS_MFA'
        event['response']['failAuthentication'] = False
        event['response']['issueTokens'] = False

    return event




def lambda_handler(event, context):
    session = event['request']['session']
    auth_params = session[-1]['challengeMetadata'] if session else {}

    # Check if MFA is bypassed
    if auth_params.get('deviceType') == 'trusted':
        # Skip challenge creation for trusted devices
        event['response']['publicChallengeParameters'] = {}
        event['response']['privateChallengeParameters'] = {}
    else:
        # Create MFA challenge
        event['response']['publicChallengeParameters'] = {'challenge': 'SMS_MFA'}
        event['response']['privateChallengeParameters'] = {'mfaCode': '123456'}  # Example
    return event


import logging

# Configure the logger
logging.basicConfig(
    level=logging.DEBUG,  # Set the logging level to debug (logs everything)
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'  # Customize log format
)


# Log messages at different severity levels
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")


def lambda_handler(event, context):
    # If there's no session, it's the first authentication attempt
    if not event['request']['session']:
        # Check if MFA should be skipped
        if 'skipMFA' in event['request']['clientMetadata'] and event['request']['clientMetadata']['skipMFA'] == 'true':
            # Skip MFA and directly issue tokens after validating the username/password
            event['response']['issueTokens'] = True
        else:
            # Otherwise, initiate the custom challenge for password validation
            event['response']['challengeName'] = 'CUSTOM_CHALLENGE'
            event['response']['failAuthentication'] = False
    elif event['request']['session'][-1]['challengeResult'] is True:
        # If password is correct, issue tokens
        event['response']['issueTokens'] = True
    else:
        # If authentication fails, fail the authentication
        event['response']['failAuthentication'] = True

    return event


def lambda_handler(event, context):
    if event['request']['challengeName'] == 'CUSTOM_CHALLENGE':
        # Store the expected username and password for validation (you should ideally retrieve this securely from Cognito)
        event['response']['publicChallengeParameters'] = {
            'challenge': 'Enter your password'
        }
        event['response']['privateChallengeParameters'] = {
            'username': event['request']['userAttributes']['username'],
            'password': event['request']['userAttributes']['password']  # Or securely fetch password
        }
    return event


def lambda_handler(event, context):
    # Retrieve the expected username and password from private challenge parameters
    stored_username = event['request']['privateChallengeParameters']['username']
    stored_password = event['request']['privateChallengeParameters']['password']
    
    # Get the response from the client (the username and password the user entered)
    provided_username = event['request']['challengeAnswer']['username']
    provided_password = event['request']['challengeAnswer']['password']

    # Check if the provided username and password match the stored values
    if stored_username == provided_username and stored_password == provided_password:
        event['response']['answerCorrect'] = True  # Valid username and password
        
        # Check if MFA should be skipped (based on 'skipMFA' custom parameter)
        if 'skipMFA' in event['request']['clientMetadata'] and event['request']['clientMetadata']['skipMFA'] == 'true':
            event['response']['issueTokens'] = True  # Skip MFA and issue tokens
        else:
            event['response']['issueTokens'] = False  # MFA needed, do not issue tokens yet
    else:
        event['response']['answerCorrect'] = False  # Invalid credentials

    return event










def lambda_handler(event, context):
    # Log the incoming event for debugging
    print("DefineAuthChallenge Event: ", event)
    
    # Check if it's the first authentication attempt
    if not event['request']['session']:
        # Check if 'skipMFA' is present in AuthParameters
        skip_mfa = event['request']['parameters'].get('skipMFA', 'false') == 'true'
        
        if skip_mfa:
            # Skip MFA and directly issue tokens after password validation
            event['response']['issueTokens'] = True
        else:
            # Otherwise, initiate the custom challenge (e.g., password validation)
            event['response']['challengeName'] = 'CUSTOM_CHALLENGE'
            event['response']['failAuthentication'] = False  # Don't fail authentication yet
    elif event['request']['session'][-1]['challengeResult'] is True:
        # If the password validation succeeds, issue tokens
        event['response']['issueTokens'] = True
    else:
        # If the password validation fails, fail the authentication
        event['response']['failAuthentication'] = True

    return event





def lambda_handler(event, context):
    # Log the incoming event for debugging
    print("CreateAuthChallenge Event: ", event)
    
    # If the challenge is a custom one (password validation)
    if event['request']['challengeName'] == 'CUSTOM_CHALLENGE':
        # Provide challenge details (password validation)
        event['response']['publicChallengeParameters'] = {
            'challenge': 'Enter your password'
        }
        event['response']['privateChallengeParameters'] = {
            'username': event['request']['userAttributes']['username'],
            # Password can be securely stored and retrieved, if necessary
            'password': event['request']['userAttributes']['password']
        }
    return event







def lambda_handler(event, context):
    # Log the incoming event for debugging
    print("VerifyAuthChallengeResponse Event: ", event)
    
    # Retrieve the expected username and password from private challenge parameters
    stored_username = event['request']['privateChallengeParameters']['username']
    stored_password = event['request']['privateChallengeParameters']['password']
    
    # Get the username and password entered by the user
    provided_username = event['request']['challengeAnswer']['username']
    provided_password = event['request']['challengeAnswer']['password']

    # Validate the username and password
    if stored_username == provided_username and stored_password == provided_password:
        event['response']['answerCorrect'] = True  # Correct answer
        
        # Check for skipMFA in AuthParameters
        skip_mfa = event['request']['parameters'].get('skipMFA', 'false') == 'true'
        
        if skip_mfa:
            # If skipMFA is true, issue tokens immediately and skip MFA
            event['response']['issueTokens'] = True
        else:
            # If skipMFA is not set, proceed with MFA
            event['response']['issueTokens'] = False  # MFA needed, do not issue tokens yet
    else:
        # If authentication fails, don't issue tokens
        event['response']['answerCorrect'] = False
        event['response']['issueTokens'] = False

    return event

